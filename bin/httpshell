#!/usr/bin/env ruby

require "rubygems"
require 'httpshell'
require "net/http"
require "uri"

def http_request(method, path)
  uri = URI.parse(path)
  http = Net::HTTP.new(uri.host, uri.port)
  http.request(method.new(uri.request_uri))
end

@spec = Gem::Specification::load("httpshell.gemspec")
@env = HTTPShell::Environment.new
@commands = {
  cd: lambda do |env|
    #do nothing
    nil
  end,
  
  get: lambda do |env|
    http_request(Net::HTTP::Get, env.working_path).body
  end,
  
  post: lambda do |env|
    http_request(Net::HTTP::Post, env.working_path).body
  end,
  
  put: lambda do |env|
    http_request(Net::HTTP::Put, env.working_path).body
  end,
  
  delete: lambda do |env|
    http_request(Net::HTTP::Delete, env.working_path).body
  end,
  
  debug: lambda do |env|
    puts "Debug Information: "
    puts "Working Path:\t#{env.working_path}"
    env.variables.each do |key, value|
      puts "#{key}:\t#{value}"
    end
    puts ""
    nil
  end
}

puts "#{@spec.name} #{@spec.version}"
puts "By #{@spec.author} <#{@spec.email[0]}>"
puts ""

while true
  print "#{@env.working_path}/ > "
  command = gets.strip
  
  if command == 'exit' or command == 'quit'
    break
  end
  
  sub_commands = command.split('|').map { |c| c.strip }
  
  current_output = nil
  sub_commands.each do |sub_command|
    #first to see whether it is a variable
    if sub_command.start_with? '$'
      if current_output
        @env.variables[sub_command.sub(/^\$/, '')] = current_output
        current_output = current_output
      else
        current_output = @env.variables[sub_command.sub(/^\$/, '')]
      end
      next
    end
    
    params = sub_command.split(' ').map { |p| p.strip }
    params.delete("")
    
    #then check whether it is blank
    if params.length == 0
      next
    end
    
    #or a command
    exec_com = @commands[:"#{params[0]}"]
    if params.length <= 2 and exec_com != nil
      #if it is, then run it.
      if params[1]
        @env.cd(params[1])
      end
      current_output = exec_com.call(@env)
      next
    end
    
    #then we don't know how to deal with it.
    puts 'error: do not know how to deal with it. '
  end
  
  if not (current_output == nil or current_output.to_s.strip == '')
    puts current_output.to_s.strip
    puts ""
  end
end